PAYLOAD_EXECUTOR
================



        Executes the DRAM payload from memory


    **Instruction decoder**

    All instructions are 32-bit. The format of most instructions is the same,
    except for the LOOP instruction, which has a constant TIMESLICE of 0.

    **NOTE:** LOOP instruction will *jump* COUNT times, meaning that the "code"
    inside the loop will effectively be executed COUNT+1 times.

    Op codes:

+------+-------+
+ Op   + Value +
+======+=======+
+ NOOP | 0b000 +
+------+-------+
+ LOOP | 0b111 +
+------+-------+
+ ACT  | 0b100 +
+------+-------+
+ PRE  | 0b101 +
+------+-------+
+ REF  | 0b110 +
+------+-------+
+ ZQC  | 0b001 +
+------+-------+
+ READ | 0b010 +
+------+-------+

    Instruction format::

              LSB                       MSB
        dfi:  OP_CODE | TIMESLICE | ADDRESS
        noop: OP_CODE | TIMESLICE_NOOP
        loop: OP_CODE | COUNT     | JUMP

    Where ADDRESS depends on the DFI command and is one of::

        LSB              MSB
        RANK | BANK | COLUMN
        RANK | BANK | ROW



Register Listing for PAYLOAD_EXECUTOR
-------------------------------------

+------------------------------------------------------------------+-------------------------------------------------+
| Register                                                         | Address                                         |
+==================================================================+=================================================+
| :ref:`PAYLOAD_EXECUTOR_START <PAYLOAD_EXECUTOR_START>`           | :ref:`0x00006800 <PAYLOAD_EXECUTOR_START>`      |
+------------------------------------------------------------------+-------------------------------------------------+
| :ref:`PAYLOAD_EXECUTOR_STATUS <PAYLOAD_EXECUTOR_STATUS>`         | :ref:`0x00006804 <PAYLOAD_EXECUTOR_STATUS>`     |
+------------------------------------------------------------------+-------------------------------------------------+
| :ref:`PAYLOAD_EXECUTOR_READ_COUNT <PAYLOAD_EXECUTOR_READ_COUNT>` | :ref:`0x00006808 <PAYLOAD_EXECUTOR_READ_COUNT>` |
+------------------------------------------------------------------+-------------------------------------------------+

PAYLOAD_EXECUTOR_START
^^^^^^^^^^^^^^^^^^^^^^

`Address: 0x00006800 + 0x0 = 0x00006800`

    Writing to this register initializes payload execution

    .. wavedrom::
        :caption: PAYLOAD_EXECUTOR_START

        {
            "reg": [
                {"name": "start", "bits": 1},
                {"bits": 31},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


PAYLOAD_EXECUTOR_STATUS
^^^^^^^^^^^^^^^^^^^^^^^

`Address: 0x00006800 + 0x4 = 0x00006804`

    Payload executor status register

    .. wavedrom::
        :caption: PAYLOAD_EXECUTOR_STATUS

        {
            "reg": [
                {"name": "ready",  "bits": 1},
                {"name": "overflow",  "bits": 1},
                {"bits": 30}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


+-------+----------+---------------------------------------------------------------------------------+
| Field | Name     | Description                                                                     |
+=======+==========+=================================================================================+
| [0]   | READY    | Indicates that the executor is not running                                      |
+-------+----------+---------------------------------------------------------------------------------+
| [1]   | OVERFLOW | Indicates the scratchpad memory address counter has overflown due to the number |
|       |          | of READ commands sent during execution                                          |
+-------+----------+---------------------------------------------------------------------------------+

PAYLOAD_EXECUTOR_READ_COUNT
^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Address: 0x00006800 + 0x8 = 0x00006808`

    Number of data from READ commands that is stored in the scratchpad memory

    .. wavedrom::
        :caption: PAYLOAD_EXECUTOR_READ_COUNT

        {
            "reg": [
                {"name": "read_count[5:0]", "bits": 6},
                {"bits": 26},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


